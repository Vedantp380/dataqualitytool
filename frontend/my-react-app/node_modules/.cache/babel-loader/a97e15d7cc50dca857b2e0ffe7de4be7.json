{"ast":null,"code":"var _jsxFileName = \"/workspaces/dataqualitytool/frontend/my-react-app/src/components/DataQuality.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataQuality = () => {\n  _s();\n  const [columns, setColumns] = useState([]);\n  const [error, setError] = useState(null);\n  const handleFileUpload = e => {\n    var _e$target$files;\n    setError(null);\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = evt => {\n      var _evt$target;\n      const data = (_evt$target = evt.target) === null || _evt$target === void 0 ? void 0 : _evt$target.result;\n      try {\n        const workbook = XLSX.read(data, {\n          type: 'binary'\n        });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n        if (jsonData.length > 0) {\n          setColumns(jsonData[0]);\n        } else {\n          setColumns([]);\n          setError('No columns found.');\n        }\n      } catch (err) {\n        setError('Failed to parse Excel file.');\n      }\n    };\n    reader.readAsBinaryString(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Excel File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx,.xls\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 23\n    }, this), columns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Columns:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: columns.map((col, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: col\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(DataQuality, \"mWIje8/y688olfRuwh8d90b4AFc=\");\n_c = DataQuality;\nexport default DataQuality;\nvar _c;\n$RefreshReg$(_c, \"DataQuality\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","DataQuality","_s","columns","setColumns","error","setError","handleFileUpload","e","_e$target$files","file","target","files","reader","FileReader","onload","evt","_evt$target","data","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","length","err","readAsBinaryString","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","style","color","map","col","idx","_c","$RefreshReg$"],"sources":["/workspaces/dataqualitytool/frontend/my-react-app/src/components/DataQuality.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\n\nconst DataQuality: React.FC = () => {\n    const [columns, setColumns] = useState<string[]>([]);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setError(null);\n        const file = e.target.files?.[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (evt) => {\n            const data = evt.target?.result;\n            try {\n                const workbook = XLSX.read(data, { type: 'binary' });\n                const sheetName = workbook.SheetNames[0];\n                const worksheet = workbook.Sheets[sheetName];\n                const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n                if (jsonData.length > 0) {\n                    setColumns(jsonData[0] as string[]);\n                } else {\n                    setColumns([]);\n                    setError('No columns found.');\n                }\n            } catch (err) {\n                setError('Failed to parse Excel file.');\n            }\n        };\n        reader.readAsBinaryString(file);\n    };\n\n    return (\n        <div>\n            <h2>Upload Excel File</h2>\n            <input type=\"file\" accept=\".xlsx,.xls\" onChange={handleFileUpload} />\n            {error && <div style={{ color: 'red' }}>{error}</div>}\n            {columns.length > 0 && (\n                <div>\n                    <h3>Columns:</h3>\n                    <ul>\n                        {columns.map((col, idx) => (\n                            <li key={idx}>{col}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default DataQuality;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}